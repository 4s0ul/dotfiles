# general
set -s escape-time 0
set-option -sa terminal-features ',xterm-256color:RGB'
set-option -g default-terminal "screen-256color"
set-option -g focus-events on
set -g base-index 1
set -g renumber-windows on
set-option -g allow-passthrough on

# prefix
# unbind C-b
# set-option -g prefix C-SPACE
# bind C-SPACE send-prefix

# status line
set -g status-position top
set -g status-justify absolute-centre
set -g status-style 'fg=default bg=#181825'

# left status
set -g status-left ' #S'
set -g status-left-length 100
set -g status-left-style 'fg=default'

# window status
setw -g window-status-format '#I:#W'
setw -g window-status-current-format '#I:#W'
setw -g window-status-current-style 'fg=default bold'

# right status
set -g status-right '#{pane_current_path} '
set -g status-right-length 100
set -g status-right-style 'fg=default'

# message
set -g message-style 'fg=default bg=#181825'

# active border
set -g pane-active-border-style 'fg=default bg=default'

# pane switching
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R

# Smart pane switching with awareness of Neovim splits.
bind h if -F "#{@pane-is-vim}" 'send-keys M-h'  'select-pane -L'
bind j if -F "#{@pane-is-vim}" 'send-keys M-j'  'select-pane -D'
bind k if -F "#{@pane-is-vim}" 'send-keys M-k'  'select-pane -U'
bind l if -F "#{@pane-is-vim}" 'send-keys M-l'  'select-pane -R'

# pane swapping
# bind H swap-pane -t '{left-of}'\; select-pane -t '{left-of}'
# bind J swap-pane -t '{down-of}'\; select-pane -t '{down-of}'
# bind K swap-pane -t '{up-of}'\; select-pane -t '{up-of}'
# bind L swap-pane -t '{right-of}'\; select-pane -t '{right-of}'

# Smart pane swapping with awareness of Neovim splits.
bind H if -F "#{@pane-is-vim}" "send-keys M-H" "swap-pane -t '.{left-of}' \; select-pane -t '.{left-of}'"
bind J if -F "#{@pane-is-vim}" "send-keys M-J" "swap-pane -t '.{down-of}' \; select-pane -t '.{down-of}'"
bind K if -F "#{@pane-is-vim}" "send-keys M-K" "swap-pane -t '.{up-of}' \; select-pane -t '.{up-of}'"
bind L if -F "#{@pane-is-vim}" "send-keys M-L" "swap-pane -t '.{right-of}' \; select-pane -t '.{right-of}'"

# pane resizing
# bind -r -T prefix C-h resize-pane -L 5
# bind -r -T prefix C-j resize-pane -D 5
# bind -r -T prefix C-k resize-pane -U 5
# bind -r -T prefix C-l resize-pane -R 5

# Smart pane resizing with awareness of Neovim splits.
bind -r -T prefix C-h if -F "#{@pane-is-vim}" 'send-keys C-M-h' 'resize-pane -L 5'
bind -r -T prefix C-j if -F "#{@pane-is-vim}" 'send-keys C-M-j' 'resize-pane -D 5'
bind -r -T prefix C-k if -F "#{@pane-is-vim}" 'send-keys C-M-k' 'resize-pane -U 5'
bind -r -T prefix C-l if -F "#{@pane-is-vim}" 'send-keys C-M-l' 'resize-pane -R 5'

# splits
bind '"' split-window -v -c "#{pane_current_path}"
bind '%' split-window -h -c "#{pane_current_path}"

# windows
bind c new-window -c "#{pane_current_path}"
bind P swap-window -t -1\; select-window -t -1
bind N swap-window -t +1\; select-window -t +1

# copy mode
setw -g mode-keys vi
# unbind -T copy-mode-vi v
# bind -T copy-mode-vi v send -X begin-selection
# bind -T copy-mode-vi C-v send -X rectangle-toggle
# bind-key -T copy-mode-vi 'C-v' send -X begin-selection \; send -X rectangle-toggle
# bind -T copy-mode-vi y send -X copy-selection-and-cancel

# popups
bind g display-popup -E -w 80% -h 80% -d '#{pane_current_path}' 'lazygit'
bind y display-popup -E -w 80% -h 80% -d '#{pane_current_path}' 'yazi'
bind b display-popup -E -w 80% -h 80% -d '#{pane_current_path}' 'btop'
